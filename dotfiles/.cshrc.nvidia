# UTF-8 or go home.
setenv LC_TYPE en_US.utf-8

# A righteous umask
umask 22

# Defaults
setenv  EDITOR      vim
setenv  PAGER       less
setenv  BLOCKSIZE   K
setenv  VISUAL      $EDITOR
setenv  NCURSES_NO_UTF8_ACS 1
setenv  TERM        xterm-color
setenv  EMACS_SERVER_FILE $HOME/.emacs.cache/server/server

# Binary path
setenv gcc_root /home/denver/release/sw/tools/gcc-x86/5.4.0/cl45807481/CentOS-6.8
setenv path_utils '/home/denver/release/sw/tools/cmake/current/bin /home/denver/release/sw/tools/python-3.7.2/bin /home/utils/flex-2.6.4/bin /home/utils/bison-2.7.1/bin /home/denver/release/sw/tools/gcc-x86/5.4.0/current/CentOS-6.8/bin /home/denver/release/sw/tools/texinfo-4.9/bin /home/denver/release/sw/tools/doxygen/bin /home/utils/perl-5.12/5.12.1-nothreads-64/bin /home/utils/make-4.2.1/bin /home/utils/gdb-8.2.1/bin /home/denver/release/sw/tools/binutils-2.28/bin /home/nv/bin /home/utils/bin /usr/X11R6/bin /usr/kerberos/bin /usr/local/lsf/bin'

if ( ! $?newpath ) set newpath
foreach d ($HOME/.local/bin $HOME/local/bin $HOME/local/usr/bin $HOME/bin $gcc_root/bin $HOME/anaconda3/bin $HOME/builds/llvm/build/bin $HOME/local/cmake-3.15.5-Linux-x86_64/bin $path_utils $PATH /sbin /bin /usr/sbin /usr/bin /usr/games /usr/local/sbin /usr/local/bin)
        if ( -d $d ) then
           set -f newpath = ( $newpath $d )
        endif
end
set path = ( $newpath )
unset d
unset newpath

# Library path
if ( ! $?newpath ) set newpath
foreach d ($HOME/local/lib64 $HOME/local/lib $HOME/local/usr/lib $HOME/.local/lib64 $HOME/.local/lib $gcc_root/lib64 $gcc_root/lib /lib64 /lib /usr/lib64 /usr/lib /usr/local/lib64 /usr/local/lib)
        if ( -d $d ) then
           set -f newpath = "${newpath}:${d}"
        endif
end
set ld_library_path = ( $newpath )
setenv LD_LIBRARY_PATH $ld_library_path
unset d
unset newpath

# Aliases
alias emacs /home/scratch.abelardoj_denver-info/builds/emacs/build/src/emacs
alias cppcheck /home/scratch.abelardoj_denver-info/builds/cppcheck/cppcheck
unalias gcc

# Issue with RedhatOS
setenv  GIT_ASKPASS

# P4 defaults
setenv GENIE_BRANCH_DEFAULT nvcpu

# P4 client (this is host specific)
setenv P4CLIENT abelardojara-nvcpu
setenv P4CLIENTHOME /home/scratch.abelardoj_denver-info/jfubar-nvcpu

# OpenBLAS issues
setenv OMP_NUM_THREADS 1
setenv USE_SIMPLE_THREADED_LEVEL3 1

# GTAGS
setenv GTAGSLABEL exuberant-ctags
setenv GTAGSLIBPATH $HOME/.gtags
setenv GTAGSTHROUGH true

# Missing compiler flags
# https://github.com/zdevito/ATen/issues/183
setenv CFLAGS "-D__STDC_FORMAT_MACROS"
setenv CFLAGS "${CFLAGS} -fPIC"
setenv CXXFLAGS "${CFLAGS}"
# https://github.com/rust-lang/rust/issues/37786
setenv ASFLAGS "-mrelax-relocations=no"

# Missing linker flags
# https://github.com/tmux/tmux/issues/747
setenv LD_FLAGS "-lrt -Wl,--copy-dt-needed-entries"
# https://github.com/rust-lang/rust/issues/37786
setenv LD_FLAGS "${LD_FLAGS} --compress-debug-sections=none"
# https://github.com/rust-lang/rust/issues/37786
setenv LD_FLAGS "${LD_FLAGS} --no-relax"

# trun on Home End key
bindkey ^[[1~ beginning-of-line
bindkey ^[[4~ end-of-line

# DEL:
bindkey ^[[3~ delete-char

# HOME : go to the beginning of the line.
# already bound to beginnning-of-line, but the keycode thing was different.
bindkey ^[[H beginning-of-line

# END : go to the end of the line.
# same as above.
bindkey ^[[F end-of-line

# PAGE UP : search in history backwards for line beginning as current.
bindkey ^[[I history-search-backward
bindkey ^[[5~ history-search-backward   # for x

# PAGE DOWN : search in history forwards for line beginning as current.
bindkey ^[[G history-search-forward
bindkey ^[[6~ history-search-forward    # for x

# Search history using keys
bindkey -k up history-search-backward
bindkey -k down history-search-forward

if ($?prompt) then
    set promptchars = "%#"
    set filec
    set history = 8000
    set savehist = (8000 merge)
    set histfile = "$HOME/.csh_history"
    set histdup = erase              # save only unique history events
    set notify                       # notification when jobs change state
    #set recexact                    # completion always completes on a first exact match
    set autocorrect                  # spell-word editor command is invoked automatically
    set autoexpand                   # run expand-history before each completion attempt
    set implicitcd                   # change directory without cd
    set correct = cmd                # commands are automatically spelling-corrected
    set symlinks = chase             # symbolic link is expanded to the real name of the directory
    set complete = enhance           # completion ignores case and considers hyphens and underscores
    set autolist = ambiguous         # choices are listed only when completion fails
    set matchbeep = ambiguous        # beeps only when there is no match
    set color = ls-F                 # enables colors for the builtin autolist (TAB)set histfile = "$HOME/.csh_history"

    set time=(8 "\
Time spent in user mode   (CPU seconds) : %Us\
Time spent in kernel mode (CPU seconds) : %Ss\
Total time                              : %Es\
CPU utilization (percentage)            : %P\
Times the process was swapped           : %W\
Times of major page faults              : %F\
Times of minor page faults              : %R")
      # set watch=(0 any any)
      # set who="%n has %a %l from %M."
endif

if ( -d ~/Mail/ ) then
    set mail = ~/Mail/
endif

complete make           'n@*@`make -pn | sed -n -E "/^[#_.\/[:blank:]]+/d; /=/d; s/[[:blank:]]*:.*//gp;"`@'

complete pkill          'c/-/(1 2 3 6 9 14 15 HUP INT QUIT ABRT KILL ALRM TERM)/'\
                            'n@*@`ps -a -x -c -o command="" | sort | uniq`@'

complete git 'p@1@`/bin/ls -1 /usr/libexec/git-core/ | grep "git-" | sed "s/git-//"`@' 'n/checkout/`git branch | tr -d "*"`/'

alias precmd  "history -S; history -M; source ~/bin/gitprompt.csh"
alias postcmd 'history -S'     # update and save history after each command

# gpg-agent
# Set GPG_TTY for curses pinentry
# if ( -o /dev/$tty && -c /dev/$tty ) setenv GPG_TTY /dev/$tty

# if ( -f ~/.gpg-agent-info ) then
#   set TPID = `pgrep -nU $USER gpg-agent`
#   if ($TPID == "") then
#     gpg-agent -q --daemon -c >! ~/.gpg-agent-info
#     echo "setenv GPG_AGENT_PID `pgrep -U $USER gpg-agent`" >> ~/.gpg-agent-info
#   else
#     source ~/.gpg-agent-info
#     if ($?GPG_AGENT_PID) then
#       if ($GPG_AGENT_PID != $TPID) then
#         gpg-agent -q --daemon -c >! ~/.gpg-agent-info
#         echo "setenv GPG_AGENT_PID `pgrep -U $USER gpg-agent`" >> ~/.gpg-agent-info
#       endif
#     else
#       gpg-agent -q --daemon -c >! ~/.gpg-agent-info
#       echo "setenv GPG_AGENT_PID `pgrep -U $USER gpg-agent`" >> ~/.gpg-agent-info
#     endif
#   endif
#   source ~/.gpg-agent-info
#   unset TPID
# endif
